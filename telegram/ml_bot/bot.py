import os
import logging
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import aiohttp

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(name)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_TOKEN = os.getenv('TELEGRAM_BOT_ML_API_KEY')
API_ENDPOINT_URL = os.getenv('API_ENDPOINT_URL_ML')
RECOGNIZE_URL = f"http://backend:8000/ml/recognize-license-plate"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
if not API_TOKEN:
    logger.critical("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_ML_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞!")
    exit("–û—à–∏–±–∫–∞: TELEGRAM_BOT_ML_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π
start_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üöó –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è")],
        [KeyboardButton(text="üÜò –ü–æ–º–æ—â—å")]
    ],
    resize_keyboard=True,
    one_time_keyboard=True
)


# --- –†–µ–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å ML API ---
async def call_ml_api(image_bytes: bytes, endpoint_url: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π API-—ç–Ω–¥–ø–æ–∏–Ω—Ç"""
    logger.info("ML API called (image size: %d bytes)", len(image_bytes))
    try:
        async with aiohttp.ClientSession() as session:
            data = aiohttp.FormData()
            data.add_field('file',
                           image_bytes,
                           filename='image.jpg',
                           content_type='image/jpeg')
            async with session.post(endpoint_url, data=data) as response:
                if response.status == 200:
                    result = await response.json()
                    logger.info("ML API response: %s", result)
                    return result
                else:
                    logger.error("ML API returned error: %d", response.status)
                    return None
    except Exception as e:
        logger.exception("Network error while calling ML API:")
        return None


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π ---
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "üöó Gate Opener Bot\n\n"
        "–Ø –±–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è —à–ª–∞–≥–±–∞—É–º–∞. "
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è.",
        reply_markup=start_keyboard
    )


@dp.message(F.text == "üöó –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è")
async def request_photo(message: types.Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:")


@dp.message(F.text == "üÜò –ü–æ–º–æ—â—å")
async def show_help(message: types.Message):
    await message.answer(
        "‚ÑπÔ∏è **–ü–æ–º–æ—â—å**\n\n"
        "1. –ù–∞–∂–º–∏—Ç–µ 'üöó –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è'\n"
        "2. –°–¥–µ–ª–∞–π—Ç–µ —á–µ—Ç–∫–æ–µ —Ñ–æ—Ç–æ –Ω–æ–º–µ—Ä–Ω–æ–≥–æ –∑–Ω–∞–∫–∞\n"
        "3. –î–æ–∂–¥–∏—Ç–µ—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è\n\n"
        "–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞: @support_username"
    )


@dp.message(F.photo)
async def handle_car_photo(message: types.Message):
    try:
        logger.info("Received photo from user %s", message.from_user.id)
        photo = message.photo[-1]
        file = await bot.get_file(photo.file_id)

        image_bytes_io = await bot.download_file(file.file_path)
        image_bytes = image_bytes_io.read()
        image_bytes_io.close()

        logger.info("Photo downloaded, size: %d bytes", len(image_bytes))

        # === 2. –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –Ω–æ–º–µ—Ä–Ω–æ–º –∑–Ω–∞–∫–µ (recognize) ===
        recognize_result = await call_ml_api(image_bytes, RECOGNIZE_URL)
        if recognize_result and "license_plate" in recognize_result:
            plate_number = recognize_result["license_plate"]
            confidence = recognize_result["confidence"]
            await message.reply(f"üî¢ –ù–æ–º–µ—Ä: `{plate_number}` (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f})", reply_markup=start_keyboard)
        elif recognize_result and "message" in recognize_result:
            await message.reply(f"‚ùå –ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {recognize_result['message']}", reply_markup=start_keyboard)
        else:
            await message.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ –Ω–æ–º–µ—Ä–Ω–æ–≥–æ –∑–Ω–∞–∫–∞.", reply_markup=start_keyboard)

    except Exception as e:
        logger.exception("Error processing photo:")
        await message.reply(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=start_keyboard
        )


# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def main():
    logger.info("Starting bot...")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())